---
- name: User
  hosts: all
  become: yes
  tasks:
    - name: Add user to groups
      action: user
      args:
        append: yes
        groups:
          - dialout
          - lpadmin
          - kvm
        user: tjarvstrand

- name: Directories
  hosts: all
  tags:
    - directories
  tasks:
    - action: file
      name: Create Downloads
      args:
        path: "~/Downloads"
        state: directory
    - action: file
      name: Delete unused directories
      args:
        path: "{{item}}"
        state: absent
      with_items:
        - ~/Music
        - ~/Public
        - ~/Templates
        - ~/Videos
        - ~/examples.desktop

- name: Install base packages
  hosts: all
  become: yes
  tags:
    - base-packages
  tasks:
    - action: apt
      name: Install lsb-core
      args:
        name: lsb-core
    - shell: lsb_release -a | grep Codename | cut -f 2
      register: ubuntu_codename

    - name: Add ubuntu partner
      action: apt_repository
      args:
        repo: "deb http://archive.canonical.com/ubuntu {{ubuntu_codename.stdout}} partner"

    - name: Add Git ppa
      action: apt_repository
      args:
        repo: ppa:git-core/ppa

    - action: apt
      args:
        update_cache: yes

    - action: apt
      name: Install packages
      args:
        update_cache: yes
        state: latest
        name:
          - alsa-utils
          - aptitude
          - apt-transport-https
          - autoconf
          - build-essential
          - cifs-utils # Samba
          - cups
          - cups-bsd
          - cups-pdf
          - curl
          - cryptsetup # luks encryption
          - cryptsetup-bin # luks encryption
          - daemontools # check this out!
          - emacs
          - emacs-el
          - emacs-goodies-el
          - git
          - gnupg
          - gnupg-agent
          - gzip
          - htop
          - jq
          - lsb-core
          - markdown
          - mono-complete
          - nautilus-dropbox
          - nodejs
          - network-manager
          - network-manager-openvpn
          - net-tools
          - printer-driver-all
          - plymouth
          - plymouth-themes
          - plymouth-theme-ubuntu-logo
          - python-dev
          - qemu-kvm # virtualization stuff
          - read-edid
          - rng-tools
          - ruby
          - ruby-dev
          - software-properties-common
          - ssh-askpass
          - tar
          - tmux
          - tree
          - unrar
          - unzip
          - usbmount # Automount usb
          - xcompmgr
          - x11-xkb-utils
          - xbacklight
          - xinput
          - wmname

          # erlang/otp
          - libncurses5-dev
          - libssl-dev

- name: Configuration
  hosts: all
  become: yes
  tags:
    - config
  tasks:
    - name: Set console font size
      action: replace
      args:
        dest: /etc/default/console-setup
        regexp: "FONTSIZE=.*"
        replace: "FONTSIZE=10x20"
    - shell: localectl set-keymap dvorak
    - action: lineinfile
      args:
        regexp: "[# ]*keycode 58 ="
        line: "keycode 58 = Control"
        dest: /etc/console-setup/remap.inc
    - shell: dpkg-reconfigure -f noninteractive keyboard-configuration
    - name: Set inotify watch limit
      action: lineinfile
      args:
        regexp: "fs.inotify.max_user_watches.*"
        line: "fs.inotify.max_user_watches=524288"
        dest: /etc/sysctl.conf
    - shell: sysctl -p --system

    - name: Configure journalctl
      action: lineinfile
      args:
        regexp: "[#]?Storage=.*"
        line: "Storage=persistent"
        dest: /etc/systemd/journald.conf

    - name: Configure journalctl
      action: lineinfile
      args:
        regexp: "[#]?SystemMaxUse=.*"
        line: "SystemMaxUse=20M"
        dest: /etc/systemd/journald.conf

    - name: Configure usbmount
      action: lineinfile
      args:
        regexp: ^MOUNTOPTIONS=
        line: MOUNTOPTIONS="sync,noexec,nodev,noatime,nodiratime,uid=1000,gid=1000"
        dest: /etc/usbmount/usbmount.conf

    - name: Restart journal
      action: systemd
      args:
        name: systemd-journald
        state: restarted

    - name: Set Grub linux cmdline
      action: lineinfile
      args:
        regexp: "^GRUB_CMDLINE_LINUX_DEFAULT"
        # Workaround for https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1722478
        #line: 'GRUB_CMDLINE_LINUX_DEFAULT="nosplash"'
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="splash psmouse.synaptics_intertouch=0"'
        dest: /etc/default/grub
        backup: yes
    - name: Set Grub resolution
      action: lineinfile
      args:
        regexp: "^#?GRUB_GFXMODE="
        line: "GRUB_GFXMODE=2560x1440"
        dest: /etc/default/grub
        backup: yes
    - name: Update grub
      shell: update-grub

    - shell:
        lspci -nn |
        grep VGA |
        grep -Eio "(intel|nvidia|amd/ati)" |
        tr '[:upper:]' '[:lower:]'
      register: vendor
    - action: debug
      args:
        var: vendor.stdout

    - name: Add Intel initramfs modules for Plymouth
      action: blockinfile
      when: vendor.stdout == "intel"
      args:
        backup: yes
        path: /etc/initramfs-tools/modules
        block: |
          # KMS
          intel_agp
          drm
          i915 modeset=1

    - name: Add ATI/AMD initramfs modules for Plymouth
      action: blockinfile
      when: vendor.stdout == "ati/amd"
      args:
        path: /etc/initramfs-tools/modules
        block: |
          # KMS
          drm
          radeon modeset=1

    - name: Add Nvidia initramfs modules for Plymouth
      action: blockinfile
      when: vendor.stdout == "nvidia"
      args:
        path: /etc/initramfs-tools/modules
        block: |
          # KMS
          drm
          noveau modeset=1
    - name: Set Grub resolution
      action: lineinfile
      args:
        regexp: "^#?GRUB_GFXMODE="
        line: "GRUB_GFXMODE=2560x1440"
        dest: /etc/default/grub
        backup: yes

    - name: Set Plymouth theme
      action: alternatives
      become: yes
      args:
        name: default.plymouth
        path: /usr/share/plymouth/themes/ubuntu-logo/ubuntu-logo.plymouth
    - name: Update initramfs
      shell: update-initramfs -u

- name: Networking
  hosts: all
  become: yes
  tags: network
  tasks:
    - name: Override NetworkManager only managing wifi
      action: copy
      args:
        dest: /etc/NetworkManager/conf.d/10-globally-managed-devices.conf
        content: ""
    - name: Create script to auto enable/disable wifi
      action: copy
      args:
        dest: /etc/NetworkManager/dispatcher.d/99-wifi-disable-on-ethernet
        mode: u=rwx,g=r,o=r
        content: |
          #!/bin/sh
          myname=${0##*/}
          log() { logger -p user.info -t "${myname}[$$]" "$*"; }
          IFACE=$1
          ACTION=$2

          case ${IFACE} in
              eth*|eno*|usb*)
                  case ${ACTION} in
                      up)
                          log "disabling wifi radio"
                          nmcli radio wifi off
                      ;;
                      down)
                          log "enabling wifi radio"
                          nmcli radio wifi on
                      ;;
                  esac
              ;;
          esac

- name: CLI tools
  hosts: all
  tags: cli
  vars:
    lastpass_dir: "{{lookup('env','HOME') + '/src/lastpass-cli'}}"
  tasks:
    - name: Get latest version number of z.sh
      shell: curl -Ls -o /dev/null -w %{url_effective} https://github.com/rupa/z/releases/latest | grep -Eo '[0-9.]+$'
      args:
        warn: no
      register: version
    - debug: var=version.stdout
    - name: Fetch z.sh
      action: get_url
      args:
        url: "http://github.com/rupa/z/archive/{{version.stdout}}.tar.gz"
        dest: "~/Downloads/z-v{{version.stdout}}.tar.gz"
    - name: Extract z.sh
      action: unarchive
      args:
        src: "~/Downloads/z-v{{version.stdout}}.tar.gz"
        dest: "~/.local/lib"
    - name: Rename z.sh directory
      shell: "mv z-{{version.stdout}} z"
      args:
        chdir: "~/.local/lib"

- name: LastPass CLI
  hosts: all
  tags: lastpass
  vars:
    lastpass_dir: "{{lookup('env','HOME') + '/src/lastpass-cli'}}"
  tasks:
    - name: Install LastPass CLI package dependencies
      action: apt
      become: yes
      args:
        state: latest
        name:
          - cmake
          - libcurl4-openssl-dev
          - libxml2-dev
          - xclip
    - action: git
      name: Clone repo
      args:
        repo: git://github.com/lastpass/lastpass-cli.git
        dest: "{{lastpass_dir}}"
    - name: Build LastPass
      shell: make
      args:
        chdir: "{{lastpass_dir}}"
    - name: Install LastPass
      shell: make install
      become: yes
      args:
        chdir: "{{lastpass_dir}}"


# Local Variables:
# mode: yaml
# End:
